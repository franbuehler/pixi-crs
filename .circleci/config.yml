# Getting started with CircleCI
# https://circleci.com/docs/2.0/first-steps/
#
# .circleci/config.yml
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:9.5.0-stretch

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
             sudo apt-get update && sudo apt-get install -y curl 
             mkdir -p /tmp/test-results/testcafe
             mkdir -p /tmp/test-results/modsecurity
             
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker

      - run:
          name: Start DevSlop Pixi Container
          #http://172.17.0.1:8000
          command: |
             set -x
             docker-compose version
             docker-compose up -d

      # OWASP ModSecurity Core Rule Set Container (Apache Reverse Proxy)
      # franbuehler/modsecurity-crs
      # Environment variables:
      # PARANOIA:   paranoia_level
      # ANOMALYIN:  inbound_anomaly_score_threshold
      # ANOMALYOUT: outbound_anomaly_score_threshold 
      # See https://coreruleset.org/
      #
      # BACKEND:    application backend
      # PORT:       listening port of apache, this port must be exposed: --expose
      - run:
           name: Start OWASP ModSecurity CRS Container in front of application
           #http://172.17.0.2:8001
           command: |
             docker login -u ${DOCKER_USER} -p ${DOCKER_PASS};
             docker pull franbuehler/modsecurity-crs && \
             docker run -dt --name apachecrs -e PARANOIA=1 -e \
             ANOMALYIN=1 -e ANOMALYOUT=1 -e BACKEND=http://172.17.0.1:8000 \
             -e PORT=8001 --expose 8001 franbuehler/modsecurity-crs

             #docker run -dt --name apachecrs franbuehler/modsecurity-crs

#      - run:
#           name: Start OWASP ModSecurity CRS Container in front of API
#           #http://172.17.0.3:8002
#           command: |
#             docker run -dt --name apachecrsapi -e PARANOIA=1 -e \
#             ANOMALYIN=0 -e ANOMALYOUT=0 -e BACKEND=http://172.17.0.1:8090 \
#             -e PORT=8002 --expose 8002 franbuehler/modsecurity-crs
 
      # ModSecurity Tuning:
      # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/
      # We use rule exclusion example files:
      # REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf OR
      # RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      - run:
          name: ModSecurity Tuning - Load rule exclusions
          command: |
            # this is an example:
            printf "\nSecRuleRemoveById 920350\n" > tmp.conf
            docker cp tmp.conf apachecrs:/etc/httpd/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf;
            docker exec apachecrs /usr/sbin/httpd -k graceful
#            printf "\nSecRuleUpdateTargetById 942420 \"!REQUEST_COOKIES:session\"\n" > tmp.conf
#            printf "\nSecRuleUpdateTargetById 942440 \"!REQUEST_COOKIES:session\"\n" > tmp.conf

#      - run:
#          name: ZAP baseline test of application
#          # Only fail on error code 1, which indicates at least one FAIL was found.
#          # error codes 2 & 3 indicate WARN or other, and should not break the run
#          command: |
#             (
#             docker pull owasp/zap2docker-weekly && \
#             docker run -t owasp/zap2docker-weekly zap-baseline.py \
#                -u https://raw.githubusercontent.com/franbuehler/pixi-crs/master/zap-baseline.conf?token=AQ6RVWcCWhass2qYuq5piNkgqnPrHe44ks5abPQLwA \
#                -t http://172.17.0.1:8000/ -l WARN || \
#              if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
#             # docker pull ictu/zap2docker-weekly && \
#             # docker run -t ictu/zap2docker-weekly baseline.py \
#             #    -u https://raw.githubusercontent.com/franbuehler/pixi-crs/master/zap-baseline.conf?token=AQ6RVcLZSbEfwBTEEYEgpmtKc6x3CDtMks5aY0pXwA --active_scan \
#             #    -t http://172.17.0.1:8000/ || \
#             #  if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
#              )

#      - run:
#          name: ZAP baseline test of application with CRS
#          # Only fail on error code 1, which indicates at least one FAIL was found.
#          # error codes 2 & 3 indicate WARN or other, and should not break the run
#             #               -u https://raw.githubusercontent.com/${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}/master/zap-baseline.conf \
#          command: |
#             (
#             docker login -u ${DOCKER_USER} -p ${DOCKER_PASS};
#             docker pull owasp/zap2docker-weekly && \
#             docker run -t owasp/zap2docker-weekly zap-baseline.py \
#                -u https://raw.githubusercontent.com/franbuehler/pixi-crs/master/zap-baseline.conf?token=AQ6RVWcCWhass2qYuq5piNkgqnPrHe44ks5abPQLwA \
#                -t http://172.17.0.2:8001/ -l WARN || \
#              if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
#              )

       # Debugging possibilities:
#      - run:
#          name: curl test
#          command: |
#             (
#             docker pull hiromasaono/curl && \
#             docker run -dt --name curl hiromasaono/curl && \
#             docker exec -ti curl curl http://172.17.0.1:8000/register
#             docker exec -ti curl curl http://172.17.0.2:8001/register
#             docker exec -ti apachecrs cat /etc/httpd/logs/error.log
#             docker exec -ti apachecrs curl 172.17.0.1:8000
#             )
#
      - run:
          name: ZAP API scan of application
          command: |
             (
             docker pull owasp/zap2docker-weekly && \
             docker run -t owasp/zap2docker-weekly zap-api-scan.py \
                -u https://raw.githubusercontent.com/franbuehler/pixi-crs/master/zap-api.conf?token=AQ6RVWfJc_1nytTWjO9qXejLI07dOxdXks5altKzwA \
                -f soap -l WARN \
                -t http://172.17.0.1:8090/swagger.json \
                -z "config formhandler.fields.field\(0\).fieldId=email" \
                -z "config formhandler.fields.field\(0\).value=test@pixi.owasp" \
                -z "config formhandler.fields.field\(0\).enabled=true" \
                -z "config formhandler.fields.field\(1\).fieldId=password" \
                -z "config formhandler.fields.field\(1\).value=testpass" \
                -z "config formhandler.fields.field\(1\).enabled=true" || \
              if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
              )
#
#      - run:
#          name: ZAP API scan of application with CRS
#          command: |
#             (
#             docker pull owasp/zap2docker-weekly && \
#             docker run -t owasp/zap2docker-weekly zap-api-scan.py \
#                -u https://raw.githubusercontent.com/franbuehler/pixi-crs/master/zap-api.conf?token=AQ6RVWfJc_1nytTWjO9qXejLI07dOxdXks5altKzwA \
#                -f openapi -l WARN \
#                -t http://172.17.0.3:8002/ || \
#              if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
#              )

      - run:
          name: Application Tests with Testcafe
          command: |
             # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
             # creating dummy container which will hold a volume with config
             docker create -v /tests --name configs alpine:latest /bin/true
             # copying config file into this volume
             docker cp /home/circleci/project/testcafe/tests/test.js configs:/tests
             # starting application container using this volume
             docker pull testcafe/testcafe
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafe -it testcafe/testcafe --reporter xunit:/tmp/res.xml --skip-js-errors 'chromium:headless --no-sandbox' /tests/test.js
             docker cp testcafe:/tmp/res.xml /tmp/test-results/

      - run:
          name: Application Tests with CRS with Testcafe
          command: |
             docker cp /home/circleci/project/testcafe/tests/testcrs.js configs:/tests
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafecrs -it testcafe/testcafe --reporter xunit:/tmp/res.xml --skip-js-errors 'chromium:headless --no-sandbox' /tests/testcrs.js
             docker cp testcafe:/tmp/res.xml /tmp/test-results/
             #docker run -v /home/circleci/project/testcafe/tests:/tests -it testcafe/testcafe chrome /tests/testcrs.js --skip-js-errors --reporter xunit:/tmp/test-results/res.xml

      - run:
          name: Show ModSecurity logs of Testcafe tests
          command: |
              docker exec apachecrs cat /etc/httpd/logs/error.log | grep ModSecurity | grep -v compile | tee /tmp/test-results/ModSecurity-Testcafe.log
              # If not empty -> Repair your application OR
              #              -> ModSecurity Tuning:
              # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/ OR
              #              -> GitHub issue: https://github.com/SpiderLabs/owasp-modsecurity-crs
          # we always want to see this step:        
          when: always

#      - run:
#          name: Show ModSecurity logs of ZAP API Scan
#          command: |
#              docker exec apachecrsapi cat /etc/httpd/logs/error.log | grep ModSecurity | grep -v compile
#              # If not empty -> Repair your application OR
#          # we always want to see this step:        
#          when: always

      - store_test_results:
           path: /tmp/test-results

